1. Работа с docker
По идеалогиии Docker каждый сервис должен быть в своем контейнере.

docker-compose pull - скачать образы
docker-compose build - собрать контейнеры
docker-compose build --pull - собрать контейнеры и скачать если обновились образы
docker-compose up -d - поднять контейнеры
docker-compose down --remove-orphans - остановить контейнеры
docker-compose stop nginx - основить контейнер
docker-compose restart - перезапустить все контейнеры
docker-compose ps - список запущенных контейнеров
docker-compose exec php-fpm php -v - запустить команду в запущенном контейнере
docker-compose run --rm php-cli composer - запустить команду в специальном консольном контейнере php
docker-compose run --rm php-cli composer init создать composer.json
chown -R alex:alex composer.json - смена прав
docker-compose run --rm php-cli composer require --dev roave/security-advisories:dev-master установка пакета
docker-compose run --rm php-cli composer require php-di/php-di
docker-compose run --rm php-cli composer require laminas/laminas-config-aggregator
docker-compose run --rm php-cli composer require slim/slim slim/psr7
docker-compose run --rm php-cli composer require slim/php-view


2. Работа с базой данных
Подключение к бд
127.0.0.1
root
minimal
minimal

$pdo = new PDO('mysql:dbname=minimal;host=mariadb;port=3306', 'root', 'minimal', [
    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES => false,
]);

3. Контейнер внедрения зависимостей
https://packagist.org/?query=psr-11
psr-11 php-di/php-di Выносить туда все сущности

4. slim
Фактически задача любого веб приложения получить request и отдать response

https://github.com/Cvar1984/slim

5. phinx Мограции БД
https://github.com/cakephp/phinx
https://book.cakephp.org/phinx/0/en/index.html
docker-compose run --rm php-cli composer require robmorgan/phinx
docker-compose run --rm php-cli composer require symfony/yaml
docker-compose run --rm php-cli composer phinx
docker-compose run --rm php-cli composer phinx init

Создание миграции
make create-migration name=AddedTableMenu

Добавление данных
make added-data name=Data

6. Инфраструктура Проекта
Репозитории - Через них получаем строго данные. Один репозиторий может работать с несколькими таблицами.
Сервисы - Описывают готовый функционал который который можно использовать в контроллере.
Контроллер - То место куда приходит запрос он работает с сервисами вызывая их методы.

Примеры проектов
https://github.com/maurobonfietti/rest-api-slim-php

Иерарические структуры данных
docker-compose run --rm php-cli composer require vakata/jstree

Библиотека для создания фейковых данных
docker-compose run --rm php-cli composer require fzaninotto/faker

7. Линтер phplint проверка на корректность php файлов
docker-compose run --rm php-cli composer require overtrue/phplint --dev

8. php codesniffer проверка на соответсвие стилю кодирования
docker-compose run --rm php-cli composer require squizlabs/php_codesniffer --dev

9. Синтаксические анализаторы
psalm docker-compose run --rm php-cli composer require vimeo/psalm --dev
---
Задачи
1. Работа с иерархическими структурами
2. Парсинг exсel файла и формирование готового sql
3. Пагинация
